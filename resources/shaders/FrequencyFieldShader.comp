#version 460

const float PI = 3.14159265359;
const float g = 9.81;

#define OWGE_FFT_SIZE 512 // Define OWGE_FFT_SIZE here
#define OWGE_FFT_LOG_SIZE 9 // Define OWGE_FFT_LOG_SIZE here

const uint OWGE_FFT_SIZE_BITS = 32u;


layout(set = 0, binding = 0) uniform BufferObject {
	float deltaTime;
} bo;

layout(rgba32f,set = 1, binding = 0) uniform image2D imageIn;
layout(rgba32f,set = 2, binding = 0) uniform image2D imageIn2;
layout(rgba32f,set = 3, binding = 0) uniform image2D imageOut;

vec2 complex_mul(vec2 a, vec2 b) {
    return vec2(a.x * b.x - a.y * b.y, a.x * b.y + a.y * b.x);
}


float dot_vec2(vec2 v1, vec2 v2) {
	return v1.x * v2.x + v1.y * v2.y;
}

vec2 exp_i(float arg)
{
	return vec2( cos(arg), sin(arg) );
}


layout (local_size_x = OWGE_FFT_SIZE, local_size_y = 1, local_size_z = 1) in;

void main() {
    ivec2 texpos = ivec2(gl_GlobalInvocationID.xy);
	
	vec2 X = vec2(texpos) - OWGE_FFT_SIZE / 2 - 1;
	
	vec4 pixelValue = imageLoad(imageIn, texpos);
	vec2 k = pixelValue.zw;
	vec2 h0 = pixelValue.xy;
	
	vec4 conjugatePixelValue = imageLoad(imageIn, ivec2(512 - texpos.x - 1, 512 - texpos.y - 1));
	vec2 minus_k = conjugatePixelValue.zw;
	vec2 h0_conjugate = vec2(conjugatePixelValue.x, -conjugatePixelValue.y);
	
	float magnitude = length(k);
	if(magnitude < 0.00001) magnitude = 0.00001;
	
	float omega = sqrt(g * magnitude);
	
	vec2 h_kt = complex_mul(h0, exp_i(omega*bo.deltaTime)) + complex_mul(h0_conjugate, exp_i(-omega*bo.deltaTime));

	vec4 encodedValue = vec4(h_kt.x, h_kt.y, k.x, k.y);
    imageStore(imageOut, texpos, vec4(encodedValue));
}
